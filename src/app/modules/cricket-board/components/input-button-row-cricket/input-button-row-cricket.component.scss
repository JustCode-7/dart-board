/**
 * We want to display six buttons in a single row
 */
.w-16-percent {
  width: calc(100% / 6);
}

.no-pointer {
  pointer-events: none;
  cursor: none;
}

.miss-scale {
  scale: 1.5;
  font-size: 0.8em !important;
}

.question-scale {
  scale: 0.8;
}

.maxBtnWidth {
  max-width: 15% !important;
  min-width: 15% !important;
}

/*
 * Customize the color of the mat-buttons
 *
 * `.mat-button-toggle-checked`
 *     This class is present when the button is active
 *
 * `#mat-button-toggle-n`
 *     This id is generated by Angular Material
 */
.mat-button-toggle-checked {
  &#mat-button-toggle-1 {
    background-color: #80d8ff88; // = primary
  }

  &#mat-button-toggle-2 {
    background-color: #9c27b088; // = accent
  }

  &#mat-button-toggle-3 {
    background-color: #f4433688; // = warn
  }
}


$n: 7;
$gg: 1em;
$d: 5em;
$g: .125em;
$b: .375em;
$r: calc($b / 2);
$o: -1*($b + $g);
$m: $g - $o;
$fs: 2.5;
$ro: 50%;
$rm: calc(50% - #{$r});
$ri: calc(50% - #{$b});

@function arrow($ua, $i, $m: 1, $in: 0, $dbl: 0, $sgn: 1) {
  $a0: calc($i * $ua);
  $a1: $a0 + $sgn*$m*$ua;
  $a2: $a0 + $sgn*$ua;
  $list: ();

  $xo: 50% + $ro*cos($a0);
  $yo: 50% + $ro*sin($a0);

  $list: $list, $xo $yo;

  @if $dbl > 0 {
    $list: $list, 50% + $ro*cos($a1) 50% + $ro*sin($a1)
  }

  $list: $list, calc(50% + #{$rm} * #{cos($a2)}) calc(50% + #{$rm} * #{sin($a2)});

  @if $dbl > 0 {
    $list: $list, calc(50% + #{$ri} * #{cos($a1)}) calc(50% + #{$ri} * #{sin($a1)})
  }

  $list: $list, calc(50% + #{$ri} * #{cos($a0)}) calc(50% + #{$ri} * #{sin($a0)});

  @if $in > 0 {
    $list: $list, calc(50% + #{$rm} * #{cos($a1)}) calc(50% + #{$rm} * #{sin($a1)})
  }

  @return $list, $xo $yo
}

@function spike($ua, $i, $vo: 0, $in: 0) {
  $a0: ($i - .5)*$ua;
  $av: $a0 + ($vo + .5)*$ua;
  $a1: $a0 + $ua;
  $list: ();

  $ao0: if($in < 1, $av, $a0);
  $ai0: if($in < 1, $a0, $av);

  $xo: 50% + $ro*cos($ao0);
  $yo: 50% + $ro*sin($ao0);

  $list: $list, $xo $yo;

  @if $in > 0 {
    $list: $list, 50% + $ro*cos($a1) 50% + $ro*sin($a1)
  } @else {
    $list: $list, calc(50% + #{$ri} * #{cos($a1)}) calc(50% + #{$ri} * #{sin($a1)})
  }

  $list: $list, calc(50% + #{$ri} * #{cos($ai0)}) calc(50% + #{$ri} * #{sin($ai0)});

  @return $list, $xo $yo
}

@function double($ua, $i) {
  $a0: $i*$ua;
  $a1: $a0 + .25*$ua;
  $a2: $a0 + .5*$ua;
  $a3: $a1 + .5*$ua;
  $a4: $a0 + $ua;
  $list: ();

  $xo: 50% + $ro*cos($a1);
  $yo: 50% + $ro*sin($a1);

  @return $list,
  $xo $yo,
  calc(50% + #{$ri} * #{cos($a2)}) calc(50% + #{$ri} * #{sin($a2)}),
  calc(50% + #{$ri} * #{cos($a0)}) calc(50% + #{$ri} * #{sin($a0)}),
  $xo $yo,
  50% + $ro*cos($a2) 50% + $ro*sin($a2),
  50% + $ro*cos($a4) 50% + $ro*sin($a4),
  calc(50% + #{$ri} * #{cos($a3)}) calc(50% + #{$ri} * #{sin($a3)}),
  50% + $ro*cos($a2) 50% + $ro*sin($a2),
  $xo $yo
}

@function rhombus($ua, $i) {
  $a0: $i*$ua;
  $a1: $a0 + .5*$ua;
  $a2: $a0 + $ua;
  $list: ();

  $xo: 50% + $ro*cos($a1);
  $yo: 50% + $ro*sin($a1);

  @return $list,
  $xo $yo,
  calc(50% + #{$rm} * #{cos($a2)}) calc(50% + #{$rm} * #{sin($a2)}),
  calc(50% + #{$ri} * #{cos($a1)}) calc(50% + #{$ri} * #{sin($a1)}),
  calc(50% + #{$rm} * #{cos($a0)}) calc(50% + #{$rm} * #{sin($a0)}),
  $xo $yo
}

@function hexagon($ua, $i) {
  $a0: $i*$ua;
  $a1: $a0 + .25*$ua;
  $a2: $a1 + .5*$ua;
  $a3: $a0 + $ua;
  $list: ();

  $xo: 50% + $ro*cos($a1);
  $yo: 50% + $ro*sin($a1);

  @return $list,
  $xo $yo,
  50% + $ro*cos($a2) 50% + $ro*sin($a2),
  calc(50% + #{$rm} * #{cos($a3)}) calc(50% + #{$rm} * #{sin($a3)}),
  calc(50% + #{$ri} * #{cos($a2)}) calc(50% + #{$ri} * #{sin($a2)}),
  calc(50% + #{$ri} * #{cos($a1)}) calc(50% + #{$ri} * #{sin($a1)}),
  calc(50% + #{$rm} * #{cos($a0)}) calc(50% + #{$rm} * #{sin($a0)}),
  $xo $yo
}

@function points($n, $fn-name, $fn-args) {
  $ua: calc(2 * 3.1487 / $n);
  $list: ();
  $x0: 100%;
  $y0: 50%;

  @for $i from 0 to $n {
    $list: $list, call($fn-name, $ua, $i, $fn-args...), $x0 $y0
  }

  @return $list
}


.circ-spike {
  scale: 0.9;
  box-sizing: border-box;
  place-content: center;
  position: relative;
  border-radius: 50%;
  filter: drop-shadow(1px 1px #fff);

  &::after {
    position: absolute;
    top: $o;
    right: $o;
    bottom: $o;
    left: $o;
    background: inherit;
    content: '';
    clip-path: polygon(#{points(24, double, ())})
  }

}

.circ-hexa {
  scale: 0.9;
  box-sizing: border-box;
  place-content: center;
  position: relative;
  border-radius: 50%;
  filter: drop-shadow(1px 1px #fff);

  &::after {
    position: absolute;
    top: $o;
    right: $o;
    bottom: $o;
    left: $o;
    background: inherit;
    content: '';
    clip-path: polygon(#{points(36, hexagon, ())})
  }
}

.material-symbols-outlined {
  font-size: 2.5em;
}

//.circ:nth-of-type(2)::after {
//  clip-path: polygon(#{points(36, rhombus, ())})
//}
//
//.circ:nth-of-type(3)::after {
//  clip-path: polygon(#{points(36, hexagon, ())})
//}
//
//.circ:nth-of-type(4)::after {
//  clip-path: polygon(points(36, spike, ()))
//}
//
//.circ:nth-of-type(5)::after {
//  clip-path: polygon(points(36, spike, (0, 1)))
//}
//
//.circ:nth-of-type(6)::after {
//  clip-path: polygon(points(36, spike, (1)))
//}
//
//.circ:nth-of-type(7)::after {
//  clip-path: polygon(points(36, spike, (-1)))
//}
//
//.circ:nth-of-type(8)::after {
//  clip-path: polygon(#{points(36, arrow, (.5, 1))})
//}
//
//.circ:nth-of-type(9)::after {
//  clip-path: polygon(#{points(36, arrow, (.5, 1, 0, -1))})
//}
//
//.circ:nth-of-type(10)::after {
//  clip-path: polygon(#{points(36, arrow, (.5, 1, 1))})
//}
//
//.circ:nth-of-type(11)::after {
//  clip-path: polygon(#{points(36, arrow, (.5, 1, 1, -1))})
//}
//
//.circ:nth-of-type(12)::after {
//  clip-path: polygon(#{points(24, double, ())})
//}
