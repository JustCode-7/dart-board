// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
// https://material.io/design/color/the-color-system.html#tools-for-picking-colors
$dark-primary: mat.define-palette(mat.$light-blue-palette, A100, A200, A400);
$dark-accent: mat.define-palette(mat.$purple-palette);
$dark-green: mat.define-palette(mat.$green-palette, 500);
$dark-orange: mat.define-palette(mat.$orange-palette, 800);

// The warn palette is optional (defaults to red).
$dark-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$dark-theme: mat.define-dark-theme((
  color: (
    primary: $dark-primary,
    accent: $dark-accent,
    warn: $dark-warn,
    green: $dark-green,
    orange:$dark-orange,
  )
));

//mY second-Theme

$dark-primary2: mat.define-palette(mat.$orange-palette, A700);
$dark-accent2: mat.define-palette(mat.$purple-palette, A100);

// The warn palette is optional (defaults to red).
$dark-warn2: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$dark-theme2: mat.define-dark-theme((color: (
      primary: $dark-primary2,
      accent: $dark-accent2,
      warn: $dark-warn2,
    )));


  //mY third-Theme

  $dark-primary2: mat.define-palette(mat.$deep-purple-palette, 500);
  $dark-complentary2: mat.define-palette(mat.$light-green-palette, 400);
  $dark-analogous1: mat.define-palette(mat.$indigo-palette, A400);
  $dark-analogous2: mat.define-palette(mat.$purple-palette, A400);
  $dark-triadic1: mat.define-palette(mat.$pink-palette, A400);
  $dark-triadic2: mat.define-palette(mat.$red-palette, 800);
  // The warn palette is optional (defaults to red).
  $dark-warn2: mat.define-palette(mat.$red-palette);

  // Create the theme object. A theme consists of configurations for individual
  // theming systems such as "color" or "typography".
  $dark-theme3: mat.define-dark-theme((color: (
        primary: $dark-primary,
        accent:  $dark-accent,
        analogous: $dark-green,
        tradic: $dark-orange,
        warn: $dark-warn,
      )));


// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($dark-theme3);
